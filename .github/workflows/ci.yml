name: aiida-vasp

on:
  push:
    branches:
    - '**'
    tags:
    - v[0-9]+.[0-9]+.[0-9]+*
  pull_request:

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    strategy:
      matrix:
        python: ['3.9']
    steps:
      - uses: actions/checkout@v3.3.0
      - name: Cache python dependencies
        id: cache-pip
        uses: actions/cache@v3.2.6
        with:
          path: ~/.cache/pip
          key: pip-${{ matrix.python }}-tests-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: pip-${{ matrix.python }}-tests-
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - name: Make sure virtualevn>20 is installed, which will yield newer pip and posibility to pin pip version.
        run: pip install 'virtualenv>20'
      - name: Install Tox
        run: pip install tox
      - name: Run pre-commit in Tox
        run: tox -e pre-commit
  tests:
    needs: [pre-commit]
    runs-on: ubuntu-latest
    timeout-minutes: 90
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_DB: test_lammps
          POSTGRES_PASSWORD: ""
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      rabbitmq:
        image: rabbitmq:latest
        ports:
          - 5672:5672
    strategy:
      matrix:
        python: ['3.9', '3.10', '3.11']
    steps:
      - uses: actions/checkout@v3.3.0
      - name: Cache python dependencies
        id: cache-pip
        uses: actions/cache@v3.2.6
        with:
          path: ~/.cache/pip
          key: pip-${{ matrix.python }}-tests-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: pip-${{ matrix.python }}-tests-
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - name: Install system dependencies
        run: |
          sudo apt update
          sudo .ci/enable_ssh_localhost.sh
          sudo apt install locate
          sudo updatedb
      - name: Make sure virtualevn>20 is installed, which will yield newer pip and posibility to pin pip version.
        run: pip install 'virtualenv>20'
      - name: Install Tox
        run: pip install tox
      - name: Install codecov
        if: matrix.python == '3.9'
        run: pip install codecov pytest-cov
      - name: Remove dot in Python version for passing version to tox
        uses: frabert/replace-string-action@master
        id: tox
        with:
          pattern: '\.'
          string: ${{ matrix.python }}
          replace-with: ''
      - name: Run tox and codecov
        if: matrix.python == '3.9'
        run: tox -e py${{ steps.tox.outputs.replaced }}-aiida_vasp -- --cov=./aiida_vasp --cov-append --cov-report=xml
      - name: Run tox
        if: matrix.python != '3.9'
        run: tox -e py${{ steps.tox.outputs.replaced }}-aiida_vasp
      - name: Archive error mock calculations
        uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: error-mock-calc-archive
          path: |
            test_mock_error.aiida
          retention-days: 5
          if-no-files-found: warn
      - name: Upload coverage to Codecov
        if: matrix.python == '3.9'
        uses: codecov/codecov-action@v3
        with:
          name: aiida-vasp
          fail_ci_if_error: true

  validate-release-tag:
    if: github.repository == 'aiida-vasp/aiida-vasp' && github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
    runs-on: ubuntu-latest
    steps:
    - name: Checkout source
      uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    - name: Validate the tag version against the package version
      run: python .github/workflows/validate_release_tag.py $GITHUB_REF

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [pre-commit, tests, validate-release-tag]
    steps:
    - name: Checkout source
      uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    - name: Install flit
      run: pip install flit~=3.4
    - name: Build and publish
      run: flit publish
      env:
        FLIT_USERNAME: __token__
        FLIT_PASSWORD: ${{ secrets.PYPI_KEY }}
