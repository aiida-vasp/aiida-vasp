"""Test submitting a VaspImmigrantWorkChain."""
# pylint: disable=unused-import,wildcard-import,unused-wildcard-import,unused-argument,redefined-outer-name, import-outside-toplevel
import pytest
import numpy as np
from aiida.engine import run
from aiida.common.extendeddicts import AttributeDict

from aiida_vasp.utils.fixtures import fresh_aiida_env, mock_vasp, phonondb_run, localhost, localhost_dir, potcar_family, temp_pot_folder
from aiida_vasp.utils.fixtures.data import POTCAR_FAMILY_NAME, POTCAR_MAP
from aiida_vasp.utils.aiida_utils import get_data_node, create_authinfo


@pytest.fixture
def immigrant_wc_builder(fresh_aiida_env, potcar_family, phonondb_run, localhost, mock_vasp):
    """Return VaspImmigrantWorkChain builder

    Parameters
    ----------
    fresh_aiida_env() : Refresh database
    potcar_family() : Create POTCAR family
    localhost() : Computer
    phonondb_run() : pathlib.PosixPath
    mock_vasp() :Code

    Note
    ----
    The following methods have to be visibule.
    localhost_dir() : pathlib.Path generated by tmp_path_factory, and is used in localhost()
    temp_pot_folder() : pathlib.Path generated by tmp_path_factory, and is used in potcar_family()

    """

    from aiida.plugins import WorkflowFactory

    workchain = WorkflowFactory('vasp.immigrant')

    create_authinfo(localhost, store=True)

    builder = workchain.get_builder()
    builder.code = mock_vasp
    builder.folder_path = get_data_node('str', phonondb_run)
    builder.potential_family = get_data_node('str', POTCAR_FAMILY_NAME)
    builder.potential_mapping = get_data_node('dict', dict=POTCAR_MAP)
    builder.options = get_data_node('dict',
                                    dict={
                                        'withmpi': False,
                                        'queue_name': 'None',
                                        'resources': {
                                            'num_machines': 1,
                                            'num_mpiprocs_per_machine': 1
                                        },
                                        'max_wallclock_seconds': 3600
                                    })
    return builder


def test_vasp_immigrant_wc(immigrant_wc_builder):
    """VaspImmigrantWorkChain test"""

    results, node = run.get_node(immigrant_wc_builder)

    assert node.exit_status == 0
    assert 'retrieved' in results
    assert 'misc' in results
    assert 'remote_folder' in results
    misc = results['misc'].get_dict()
    np.testing.assert_almost_equal(misc['total_energies']['energy_extrapolated'], -459.87614130)


def test_vasp_immigrant_wc_additional(immigrant_wc_builder):  # pylint: disable=invalid-name
    """VaspImmigrantWorkChain test"""

    immigrant_wc_builder.use_chgcar = get_data_node('bool', True)
    immigrant_wc_builder.use_wavecar = get_data_node('bool', True)
    results, node = run.get_node(immigrant_wc_builder)

    assert node.exit_status == 0
    assert 'retrieved' in results
    assert 'misc' in results
    assert 'remote_folder' in results

    calc_node = node.get_outgoing(link_label_filter='iteration_01').first().node
    assert 'charge_density' in calc_node.inputs
    assert 'wavefunctions' in calc_node.inputs
